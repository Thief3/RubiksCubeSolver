#[derive(Copy, Clone, Debug)]
pub enum Facelets {
    U = 0,
    R,
    F,
    D,
    L,
    B,
}

/// A struct to regulate the facelets of the cube before they are converted into
/// cube form.
///
/// # Parameters
/// * `faclets_first_half` - An array of all the faces on a cube arranged such
///     that the first 9 values represent the upper face. The next 9 the right
///     face, and so on in th order upper, right and front. Within each nine
///     values, the first is the top left, the next middle top and we carry
///     accross and down tothe bottom right.
/// * `facelets_second_half` - As above but for the faces down, left and back
///     The reason for the split is regarding the debug trait not working for
///     "large" arrays.

#[derive (Copy, Clone, Debug)]
pub struct Face {
    facelets_first_half: [Facelets; 27],
    facelets_second_half: [Facelets; 27],
}

impl Face{

    pub fn new() -> Face {
        let face = Face {
        let facelets_vals = [Facelets::U, Facelets::R, Facelets::F, Facelets::D, Facelets::L, Facelets::B,];
        for i in 0..3 {
            for j in 0..9 {
                face.facelets_first_half[i * 9 + j] = facelets_vals[i];
            }
        }
        for i in 3..6 {
            for j in 0..9 {
                face.facelets_second_half[i * 9 + j] = facelets_vals[i];
            }
        }
        }

    }
    
    /// A setter method for the facelets arrays in `Cube`. This allows us to
    /// manage the two halfs of the array as one.
    ///
    /// # Parameters
    /// * `index` - The index of which you wish to change. Between 0 and 53
    /// * `val` - The value you wish to change the specific face to.
    pub fn set_facelets(&mut self, index: usize, val: Facelets){
        if index < 27 && index >= 0 {
            self.facelets_first_half[index] = val;
        }else if index > 27 && index <= 53 {
            self.facelets_second_half[53 - index] = val;
        }else {
            panic!("set_facelets: Outside the index range for facelets. Keep index within 0 and 53. Index found: {}", index);
        }
    }

    /// A getter method fo rthe facelet arrays in `Cube`. This allows us to
    /// manage the two halfs of the array as one.
    ///
    /// # Parameters
    /// * `index` - The index of the facelets arrays you wish to access, must
    ///    be between 0 and 53 or the function will panic.
    pub fn get_facelets(& self, index:usize)->Facelets{
        if index < 27 && index >= 0 {
            return self.facelets_first_half[index]
        }else if index > 27 && index <= 53 {
            return self.facelets_second_half[53 - index]
        }else {
            panic!("get_facelets: Outside the index range for facelets. Keep index within 0 and 53. Index found: {}", index);
        }
    }
}
